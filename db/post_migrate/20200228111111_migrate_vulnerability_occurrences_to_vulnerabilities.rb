# frozen_string_literal: true

class MigrateVulnerabilityOccurrencesToVulnerabilities < ActiveRecord::Migration[6.0]
  include Gitlab::Database::MigrationHelpers

  DOWNTIME = false

  disable_ddl_transaction!

  MIGRATION = 'MigrateVulnerabilityOccurrencesToVulnerabilities'.freeze
  BATCH_SIZE = 1000
  DELAY_INTERVAL = 5.minutes.to_i

  class Project < ActiveRecord::Base
    self.table_name = 'projects'

    include ::EachBatch
  end

  def up
    Project.where("(EXISTS (SELECT 1 FROM vulnerability_occurrences WHERE (vulnerability_occurrences.project_id = projects.id)))") .each_batch(of: BATCH_SIZE) do |batch, index|
      project_ids_to_migrate = batch.pluck('id')
      project_ids_to_migrate.each do |project_id|
        migrate_in(index * DELAY_INTERVAL, MIGRATION, project_id)
      end
    end
  end

  def down
    # nothing to do
  end
end
