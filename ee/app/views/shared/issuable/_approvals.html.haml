- issuable = local_assigns.fetch(:issuable)
- presenter = local_assigns.fetch(:presenter)
- form = local_assigns.fetch(:form)

- return unless issuable.is_a?(MergeRequest)
- return unless issuable.approval_feature_available?

- can_update_approvers = can?(current_user, :update_approvers, issuable)

.form-group.row
  = form.label :approver_ids, class: 'col-form-label col-sm-2' do
    Approvers
  .col-sm-10
    - if Feature.enabled?(:approval_rules, @target_project)
      = render 'shared/issuable/approvals_multiple_rule', issuable: issuable
    - else
      = render 'shared/issuable/approvals_single_rule', issuable: issuable, presenter: presenter, form: form
    - if can_update_approvers
      - approver_presenter = MergeRequestApproverPresenter.new(issuable, skip_user: current_user)
      .form-text.text-muted.suggested-approvers
        - if approver_presenter.any?
          Suggested approvers:
          = approver_presenter.render
      - if approver_presenter.show_code_owner_tips?
        .form-text.text-muted
          Tip: add a
          = link_to 'CODEOWNERS', help_page_path('user/project/code_owners'), target: '_blank', tabindex: -1
          to automatically add approvers based on file paths and file types.
    = render 'projects/merge_requests/code_owner_approval_rules', merge_request: @mr_presenter
